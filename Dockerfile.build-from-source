# Alternative Dockerfile that builds from source
# Use this if the main Dockerfile fails

# Multi-stage build for optimal image size
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata build-base

# Set working directory
WORKDIR /build

# Set Go environment variables
ENV GO111MODULE=on
ENV CGO_ENABLED=0
ENV GOOS=linux
ENV GOARCH=amd64

# Clone the mtg repository with specific version
RUN git clone --depth 1 --branch v2.1.7 https://github.com/9seconds/mtg.git . || \
    git clone --depth 1 https://github.com/9seconds/mtg.git .

# Verify we have the source code
RUN ls -la && test -f go.mod

# Download dependencies with retry logic
RUN go mod download || (sleep 5 && go mod download) || (sleep 10 && go mod download)

# Verify dependencies
RUN go mod verify

# Build the application with verbose output
RUN echo "Building mtg..." && \
    go build -v -a \
    -ldflags '-w -s -extldflags "-static"' \
    -o mtg ./cmd/mtg && \
    echo "Build completed successfully" && \
    ls -la mtg && \
    ./mtg --version

# Final stage
FROM alpine:latest

# Install runtime dependencies
RUN apk add --no-cache ca-certificates curl tzdata

# Create non-root user
RUN addgroup -g 1000 mtg && \
    adduser -D -s /bin/sh -u 1000 -G mtg mtg

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /build/mtg /usr/local/bin/mtg

# Create necessary directories
RUN mkdir -p /app/logs /app/config && \
    chown -R mtg:mtg /app

# Copy configuration files
COPY scripts/entrypoint.sh /app/entrypoint.sh
COPY scripts/healthcheck.sh /app/healthcheck.sh

# Make scripts executable
RUN chmod +x /app/entrypoint.sh /app/healthcheck.sh

# Switch to non-root user
USER mtg

# Expose ports
EXPOSE 8443 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /app/healthcheck.sh

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command
CMD ["mtg"]
